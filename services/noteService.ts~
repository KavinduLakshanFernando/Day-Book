import { auth, db } from "@/firebase";
import { Note } from "@/type/note";
import {
    addDoc,
    collection,
    deleteDoc,
    doc,
    getDoc,
    getDocs,
    orderBy,
    query,
    updateDoc,
    where
} from "firebase/firestore";

export const noteRef = collection(db, "notes");

export const saveNote = async (note: Note) => {
    try {
        const uId = auth.currentUser?.uid;
        const docRef = await addDoc(noteRef, { ...note, uId });
        return docRef;
    } catch (error) {
        console.log(error);
    }
}

export const fetchNotes = async (uId: string): Promise<Note[]> => {
    try {
        const fetchNoteByUserId = query(
            noteRef, 
            where("uId", "==", uId), 
            orderBy("createdAt", "desc")
        );
        const querySnapshot = await getDocs(fetchNoteByUserId);
        const notes: Note[] = querySnapshot.docs.map(doc => doc.data() as Note);
        return notes;
    } catch (error) {
        console.error("Error fetching notes:", error);
        return [];
    }
};

export const deleteNote = async (id: string) => {
    try {
        const docRef = doc(db, "notes", id);
        return  deleteDoc(docRef);
    } catch (error) {
        console.error("Error deleting note:", error);
    }
}

export const updateNote = async (id: string, note: Note) => {
    console.log("note", note , id);
    try {
        const notedocRef = doc(db, "notes", id);
        const { id: _id, ...noteData } = note
        return updateDoc(notedocRef, noteData)
    } catch (error) {
        console.error("Error updating note:", error);
    }
}
export const fetchNoteById = async (id: string): Promise<Note | null> => {
    try {
        const notedocref = doc(db, "notes", id);
        const docSnap = await getDoc(notedocref);
        if (docSnap.exists()) {
            return docSnap.data() as Note;
        } else {
            return null;
        }
    } catch (error) {
        console.error("Error fetching note by ID:", error);
        return null;
    }
}

